// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: adminuser/v1/user.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Admin struct {
	Email  string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Admin) Reset()      { *m = Admin{} }
func (*Admin) ProtoMessage() {}
func (*Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_848d53a7a611b4b4, []int{0}
}
func (m *Admin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Admin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Admin.Merge(m, src)
}
func (m *Admin) XXX_Size() int {
	return m.Size()
}
func (m *Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_Admin proto.InternalMessageInfo

func (m *Admin) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Admin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Admin) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type AdminListRequest struct {
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *AdminListRequest) Reset()      { *m = AdminListRequest{} }
func (*AdminListRequest) ProtoMessage() {}
func (*AdminListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_848d53a7a611b4b4, []int{1}
}
func (m *AdminListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListRequest.Merge(m, src)
}
func (m *AdminListRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListRequest proto.InternalMessageInfo

func (m *AdminListRequest) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type AdminListReply struct {
	AdminList []*Admin `protobuf:"bytes,1,rep,name=adminList,proto3" json:"adminList,omitempty"`
}

func (m *AdminListReply) Reset()      { *m = AdminListReply{} }
func (*AdminListReply) ProtoMessage() {}
func (*AdminListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_848d53a7a611b4b4, []int{2}
}
func (m *AdminListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListReply.Merge(m, src)
}
func (m *AdminListReply) XXX_Size() int {
	return m.Size()
}
func (m *AdminListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListReply.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListReply proto.InternalMessageInfo

func (m *AdminListReply) GetAdminList() []*Admin {
	if m != nil {
		return m.AdminList
	}
	return nil
}

type UserRequest struct {
	//optional string email = 1 [(gogoproto.jsontag) = "Email"];
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status   int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *UserRequest) Reset()      { *m = UserRequest{} }
func (*UserRequest) ProtoMessage() {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_848d53a7a611b4b4, []int{3}
}
func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserRequest) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Outside struct {
	Field2 string `protobuf:"bytes,2,opt,name=Field2,proto3" json:"MyField2" gorm:"Field2"`
	// Types that are valid to be assigned to Filed:
	//	*Outside_Field3
	Filed isOutside_Filed `protobuf_oneof:"filed"`
}

func (m *Outside) Reset()      { *m = Outside{} }
func (*Outside) ProtoMessage() {}
func (*Outside) Descriptor() ([]byte, []int) {
	return fileDescriptor_848d53a7a611b4b4, []int{4}
}
func (m *Outside) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outside) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Outside.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Outside) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outside.Merge(m, src)
}
func (m *Outside) XXX_Size() int {
	return m.Size()
}
func (m *Outside) XXX_DiscardUnknown() {
	xxx_messageInfo_Outside.DiscardUnknown(m)
}

var xxx_messageInfo_Outside proto.InternalMessageInfo

type isOutside_Filed interface {
	isOutside_Filed()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Outside_Field3 struct {
	Field3 string `protobuf:"bytes,3,opt,name=Field3,proto3,oneof" json:"MyField3" xml:",comment"`
}

func (*Outside_Field3) isOutside_Filed() {}

func (m *Outside) GetFiled() isOutside_Filed {
	if m != nil {
		return m.Filed
	}
	return nil
}

func (m *Outside) GetField2() string {
	if m != nil {
		return m.Field2
	}
	return ""
}

func (m *Outside) GetField3() string {
	if x, ok := m.GetFiled().(*Outside_Field3); ok {
		return x.Field3
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Outside) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Outside_Field3)(nil),
	}
}

func init() {
	proto.RegisterType((*Admin)(nil), "api.adminuser.v1.Admin")
	proto.RegisterType((*AdminListRequest)(nil), "api.adminuser.v1.AdminListRequest")
	proto.RegisterType((*AdminListReply)(nil), "api.adminuser.v1.AdminListReply")
	proto.RegisterType((*UserRequest)(nil), "api.adminuser.v1.UserRequest")
	proto.RegisterType((*Outside)(nil), "api.adminuser.v1.Outside")
}

func init() { proto.RegisterFile("adminuser/v1/user.proto", fileDescriptor_848d53a7a611b4b4) }

var fileDescriptor_848d53a7a611b4b4 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xce, 0x6c, 0xb7, 0xdd, 0x76, 0xea, 0x2e, 0xcb, 0x28, 0x6e, 0x08, 0xee, 0xb4, 0xcc, 0xa9,
	0x88, 0x24, 0xb4, 0x65, 0x41, 0xd6, 0xd3, 0xf6, 0xe0, 0x07, 0xf8, 0x01, 0x81, 0xbd, 0x88, 0x97,
	0xd1, 0x99, 0x0d, 0x03, 0x49, 0x26, 0x66, 0x26, 0xd5, 0xde, 0x44, 0xff, 0x80, 0xe0, 0x9f, 0xf0,
	0xa7, 0x78, 0xac, 0x78, 0xd9, 0x53, 0xb1, 0xa9, 0x07, 0xf1, 0xb4, 0xec, 0x2f, 0x90, 0x4c, 0xb2,
	0x6b, 0x54, 0x2c, 0x78, 0x4a, 0x9e, 0xf7, 0x7d, 0x9e, 0xe7, 0xcd, 0xf3, 0xf2, 0x06, 0xee, 0x51,
	0x16, 0x89, 0x38, 0x53, 0x3c, 0xf5, 0xa6, 0x43, 0xaf, 0x78, 0xba, 0x49, 0x2a, 0xb5, 0x44, 0xbb,
	0x34, 0x11, 0xee, 0x65, 0xd3, 0x9d, 0x0e, 0x1d, 0x18, 0xc8, 0x40, 0x96, 0x5d, 0xe7, 0x46, 0x20,
	0x65, 0x10, 0x72, 0x8f, 0x26, 0xc2, 0xa3, 0x71, 0x2c, 0x35, 0xd5, 0x42, 0xc6, 0xaa, 0xec, 0x92,
	0x07, 0xb0, 0x79, 0x54, 0x28, 0xd1, 0x35, 0xd8, 0xe4, 0x11, 0x15, 0xa1, 0x0d, 0xfa, 0x60, 0xd0,
	0xf1, 0x4b, 0x80, 0x10, 0xdc, 0x8c, 0x69, 0xc4, 0xed, 0x86, 0x29, 0x9a, 0x77, 0x74, 0x1d, 0xb6,
	0x94, 0xa6, 0x3a, 0x53, 0xf6, 0x66, 0x1f, 0x0c, 0x1a, 0x7e, 0x85, 0xc8, 0x4d, 0xb8, 0x6b, 0xac,
	0x1e, 0x0a, 0xa5, 0x7d, 0xfe, 0x32, 0xe3, 0x4a, 0xd7, 0xb8, 0xe0, 0x37, 0xee, 0x3d, 0xb8, 0x53,
	0xe3, 0x26, 0xe1, 0x0c, 0x1d, 0xc0, 0x0e, 0xbd, 0xa8, 0xd8, 0xa0, 0xdf, 0x18, 0x74, 0x47, 0x7b,
	0xee, 0x9f, 0xc1, 0x5c, 0x23, 0xf2, 0x7f, 0x31, 0xc9, 0x31, 0xec, 0x1e, 0x2b, 0x9e, 0x5e, 0xcc,
	0x73, 0x60, 0x3b, 0xa1, 0x4a, 0xbd, 0x92, 0x29, 0xb3, 0x37, 0xcc, 0x37, 0x5f, 0xe2, 0xff, 0xca,
	0xf2, 0x0e, 0xc0, 0xad, 0x27, 0x99, 0x56, 0x82, 0x71, 0x74, 0x00, 0x5b, 0x77, 0x05, 0x0f, 0xd9,
	0xa8, 0x74, 0x9c, 0xec, 0xff, 0x58, 0xf4, 0xda, 0x8f, 0x66, 0x65, 0xed, 0x7c, 0xd1, 0xdb, 0x0e,
	0x64, 0x1a, 0x1d, 0x92, 0x12, 0x13, 0xbf, 0x22, 0xa3, 0xdb, 0x95, 0x6c, 0x5c, 0x0e, 0x9c, 0xe0,
	0x9a, 0x6c, 0x7c, 0xbe, 0xe8, 0xed, 0xbc, 0x8e, 0xc2, 0x43, 0x72, 0xeb, 0x85, 0x8c, 0x22, 0x1e,
	0x6b, 0x72, 0xdf, 0xaa, 0x94, 0xe3, 0xc9, 0x16, 0x6c, 0x9e, 0x88, 0x90, 0xb3, 0xd1, 0x67, 0x00,
	0x3b, 0x26, 0x71, 0x11, 0x11, 0x9d, 0x54, 0xa0, 0xc8, 0x8d, 0xc8, 0x3f, 0x76, 0x53, 0x5b, 0xbe,
	0xd3, 0x5f, 0xcb, 0x49, 0xc2, 0x19, 0xb9, 0xfa, 0xf6, 0xcb, 0xb7, 0x0f, 0x1b, 0xdb, 0xa8, 0xeb,
	0x19, 0x96, 0x17, 0x16, 0xd6, 0xcf, 0x60, 0xdb, 0xa0, 0x23, 0xc6, 0xd0, 0xfe, 0xdf, 0x16, 0xb5,
	0x75, 0x3b, 0xeb, 0xdb, 0x04, 0x19, 0xfb, 0x2b, 0x08, 0x56, 0xf6, 0x94, 0xb1, 0xc9, 0xe3, 0xf9,
	0x12, 0x5b, 0xa7, 0x4b, 0x6c, 0x9d, 0x2d, 0x31, 0x78, 0x93, 0x63, 0xf0, 0x31, 0xc7, 0xe0, 0x53,
	0x8e, 0xc1, 0x3c, 0xc7, 0xe0, 0x6b, 0x8e, 0xc1, 0xf7, 0x1c, 0x5b, 0x67, 0x39, 0x06, 0xef, 0x57,
	0xd8, 0x9a, 0xaf, 0xb0, 0x75, 0xba, 0xc2, 0xd6, 0x53, 0xdb, 0x9c, 0xbd, 0x39, 0xe1, 0xda, 0x4f,
	0x70, 0x67, 0x3a, 0x7c, 0xde, 0x32, 0x77, 0x3c, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x19,
	0x81, 0xe8, 0x1e, 0x03, 0x00, 0x00,
}

func (this *Admin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Admin)
	if !ok {
		that2, ok := that.(Admin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *AdminListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminListRequest)
	if !ok {
		that2, ok := that.(AdminListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *AdminListReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminListReply)
	if !ok {
		that2, ok := that.(AdminListReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AdminList) != len(that1.AdminList) {
		return false
	}
	for i := range this.AdminList {
		if !this.AdminList[i].Equal(that1.AdminList[i]) {
			return false
		}
	}
	return true
}
func (this *UserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRequest)
	if !ok {
		that2, ok := that.(UserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *Outside) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Outside)
	if !ok {
		that2, ok := that.(Outside)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	if that1.Filed == nil {
		if this.Filed != nil {
			return false
		}
	} else if this.Filed == nil {
		return false
	} else if !this.Filed.Equal(that1.Filed) {
		return false
	}
	return true
}
func (this *Outside_Field3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Outside_Field3)
	if !ok {
		that2, ok := that.(Outside_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	return true
}
func (this *Admin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.Admin{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdminListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.AdminListRequest{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdminListReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.AdminListReply{")
	if this.AdminList != nil {
		s = append(s, "AdminList: "+fmt.Sprintf("%#v", this.AdminList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.UserRequest{")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Outside) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.Outside{")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	if this.Filed != nil {
		s = append(s, "Filed: "+fmt.Sprintf("%#v", this.Filed)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Outside_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Outside_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func valueToGoStringUser(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Admin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Admin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdminListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminList) > 0 {
		for iNdEx := len(m.AdminList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdminList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Outside) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outside) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outside) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filed != nil {
		{
			size := m.Filed.Size()
			i -= size
			if _, err := m.Filed.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Field2) > 0 {
		i -= len(m.Field2)
		copy(dAtA[i:], m.Field2)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Field2)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Outside_Field3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outside_Field3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Field3)
	copy(dAtA[i:], m.Field3)
	i = encodeVarintUser(dAtA, i, uint64(len(m.Field3)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Admin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *AdminListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *AdminListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdminList) > 0 {
		for _, e := range m.AdminList {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *UserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *Outside) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field2)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Filed != nil {
		n += m.Filed.Size()
	}
	return n
}

func (m *Outside_Field3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field3)
	n += 1 + l + sovUser(uint64(l))
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Admin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Admin{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdminListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdminListRequest{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdminListReply) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdminList := "[]*Admin{"
	for _, f := range this.AdminList {
		repeatedStringForAdminList += strings.Replace(f.String(), "Admin", "Admin", 1) + ","
	}
	repeatedStringForAdminList += "}"
	s := strings.Join([]string{`&AdminListReply{`,
		`AdminList:` + repeatedStringForAdminList + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRequest{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Outside) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Outside{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`Filed:` + fmt.Sprintf("%v", this.Filed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Outside_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Outside_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUser(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Admin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminList = append(m.AdminList, &Admin{})
			if err := m.AdminList[len(m.AdminList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outside) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Outside: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Outside: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filed = &Outside_Field3{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
