// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v4.22.3
// source: adminuser/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminUseradminAdd = "/api.adminuser.v1.AdminUser/adminAdd"
const OperationAdminUserAdminList = "/api.adminuser.v1.AdminUser/AdminList"
const OperationAdminUserfrontedInfo = "/api.adminuser.v1.AdminUser/frontedInfo"
const OperationAdminUserfrontedLogin = "/api.adminuser.v1.AdminUser/frontedLogin"
const OperationAdminUserfrontedRegister = "/api.adminuser.v1.AdminUser/frontedRegister"
const OperationAdminUserfrontedReset = "/api.adminuser.v1.AdminUser/frontedReset"

type AdminUserHTTPServer interface {
	AdminAdd(context.Context, *UserRequest) (*UserRequest, error)
	// AdminList Sends a greeting
	AdminList(context.Context, *AdminListRequest) (*AdminListReply, error)
	FrontedInfo(context.Context, *FrontedInfoRequest) (*ReplyFrontedInfo, error)
	// FrontedLogin fronted
	FrontedLogin(context.Context, *LoginRequest) (*RegisterReply, error)
	FrontedRegister(context.Context, *LoginRequest) (*RegisterReply, error)
	FrontedReset(context.Context, *LoginRequest) (*RegisterReply, error)
}

func RegisterAdminUserHTTPServer(s *http.Server, srv AdminUserHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/list", _AdminUser_AdminList0_HTTP_Handler(srv))
	r.GET("/admin/add", _AdminUser_AdminAdd0_HTTP_Handler(srv))
	r.POST("/front/login", _AdminUser_FrontedLogin0_HTTP_Handler(srv))
	r.POST("/front/register", _AdminUser_FrontedRegister0_HTTP_Handler(srv))
	r.POST("/front/reset", _AdminUser_FrontedReset0_HTTP_Handler(srv))
	r.POST("/front/info", _AdminUser_FrontedInfo0_HTTP_Handler(srv))
}

func _AdminUser_AdminList0_HTTP_Handler(srv AdminUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUserAdminList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminList(ctx, req.(*AdminListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminListReply)
		return ctx.Result(200, reply)
	}
}

func _AdminUser_AdminAdd0_HTTP_Handler(srv AdminUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUseradminAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminAdd(ctx, req.(*UserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRequest)
		return ctx.Result(200, reply)
	}
}

func _AdminUser_FrontedLogin0_HTTP_Handler(srv AdminUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUserfrontedLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FrontedLogin(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _AdminUser_FrontedRegister0_HTTP_Handler(srv AdminUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUserfrontedRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FrontedRegister(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _AdminUser_FrontedReset0_HTTP_Handler(srv AdminUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUserfrontedReset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FrontedReset(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _AdminUser_FrontedInfo0_HTTP_Handler(srv AdminUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FrontedInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUserfrontedInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FrontedInfo(ctx, req.(*FrontedInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReplyFrontedInfo)
		return ctx.Result(200, reply)
	}
}

type AdminUserHTTPClient interface {
	AdminAdd(ctx context.Context, req *UserRequest, opts ...http.CallOption) (rsp *UserRequest, err error)
	AdminList(ctx context.Context, req *AdminListRequest, opts ...http.CallOption) (rsp *AdminListReply, err error)
	FrontedInfo(ctx context.Context, req *FrontedInfoRequest, opts ...http.CallOption) (rsp *ReplyFrontedInfo, err error)
	FrontedLogin(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	FrontedRegister(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	FrontedReset(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type AdminUserHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminUserHTTPClient(client *http.Client) AdminUserHTTPClient {
	return &AdminUserHTTPClientImpl{client}
}

func (c *AdminUserHTTPClientImpl) AdminAdd(ctx context.Context, in *UserRequest, opts ...http.CallOption) (*UserRequest, error) {
	var out UserRequest
	pattern := "/admin/add"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminUseradminAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminUserHTTPClientImpl) AdminList(ctx context.Context, in *AdminListRequest, opts ...http.CallOption) (*AdminListReply, error) {
	var out AdminListReply
	pattern := "/admin/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminUserAdminList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminUserHTTPClientImpl) FrontedInfo(ctx context.Context, in *FrontedInfoRequest, opts ...http.CallOption) (*ReplyFrontedInfo, error) {
	var out ReplyFrontedInfo
	pattern := "/front/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUserfrontedInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminUserHTTPClientImpl) FrontedLogin(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/front/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUserfrontedLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminUserHTTPClientImpl) FrontedRegister(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/front/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUserfrontedRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminUserHTTPClientImpl) FrontedReset(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/front/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUserfrontedReset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
